#!/usr/bin/env bash
# AutoTag application.
#
# MIT License
#
# Copyright (c) 2020 - 2021 MichaelCurrin
#
# https://github.com/MichaelCurrin/auto-tag/blob/master/LICENSE

FALLBACK_TAG='v0.0.0'
ALLOWED_BRANCHES='master|main|develop|dev|edge'

USAGE='USAGE: autotag LEVEL [-p] [-h]'
HELP="$USAGE

Increment git tag using given increment level.

Positional arguments:
    LEVEL       : 'M' for major, 'm' for minor or 'b' for bug.

Flags:
    -h --help   : Show help and exit.
    -p --preview: Do a dry run to show the new tag label only, without creating it.
"

checks() {
  if git describe --tags --exact-match &>/dev/null; then
    echo 'üõë Commit is already tagged - aborting.'
    exit 1
  fi

  local BRANCH=$(git branch --show-current)

  if [[ -z "$BRANCH" ]]; then
    echo 'üõë You appear to be checked out on a commit or tag. Please check out a branch.'
    exit 1
  fi

  if [[ ! "$BRANCH" =~ "$ALLOWED_BRANCHES" ]]; then
    echo "üõë You appear to be on a feature branch. Please check out your repo's default branch"
    echo "Allowed branches are: $ALLOWED_BRANCHES"
    exit 1
  fi
}

if [[ "$#" -eq 0 ]] || [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
  echo "$HELP"
  exit 1
fi
LEVEL_CHOICE="$1"

if [[ "$2" ]]; then
  if [[ "$2" == '-p' ]] || [[ "$2" == '--preview' ]]; then
    PREVIEW='true'
  else
    echo "üõë Invalid arguments: \"$*\""
    echo
    echo "$USAGE"
    exit 1
  fi
else
  PREVIEW='false'
fi

checks

echo 'üöõ Fetching tags...'

git fetch --tags

echo 'üîç Finding most recent tag...'

LAST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null)
LAST_TAG="${LAST_TAG:-$FALLBACK_TAG}"
LAST_TAG="${LAST_TAG/v/}"

# Replace dot with space then split into array.
LAST_TAG_ARR=(${LAST_TAG//./ })

MAJOR="${LAST_TAG_ARR[0]}"
MINOR="${LAST_TAG_ARR[1]}"
BUG="${LAST_TAG_ARR[2]}"

echo "üë¥ Last tag: v$MAJOR.$MINOR.$BUG"

# Although the exit only happens after fetching, this needs to happen here so variables are set.
# Otherwise a refactor is needed to check M|m|b and exit if needed, then actually calculate here.
case "$LEVEL_CHOICE" in
"M")
  ((MAJOR += 1))
  MINOR=0
  BUG=0
  ;;
"m")
  ((MINOR += 1))
  BUG=0
  ;;
"b")
  ((BUG += 1))
  ;;
*)
  echo "üõë Invalid arguments: '$*'"
  echo
  echo "$USAGE"
  exit 1
  ;;
esac

NEW_TAG="v$MAJOR.$MINOR.$BUG"
echo "‚≠ê New tag: $NEW_TAG"

if [[ "$PREVIEW" == true ]]; then
  echo '‚è≠Ô∏è Skipping tag creation'
else
  echo 'üè∑Ô∏è Creating annotated tag...'
  git tag -a "$NEW_TAG" -m "$NEW_TAG"
fi
